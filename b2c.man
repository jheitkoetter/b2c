B2C(1)                           USER COMMANDS                          B2C(1)



NNAAMMEE
       b2c - a binary to C file converter

SSYYNNOOPPSSIISS
       _b_2_c  [[--hhvvCCHHOO]]  [[--cc  ##ccoolluummnnss]]  [[--ii  iiddeennttiiffiieerr]] [[--tt ttyyppee]] [[--oo ffiillee]] [[--DD
       ssiizzeemmaaccrroo]] [[--GG gguuaarrddmmaaccrroo]] _f_i_l_e_(_s_)

DDEESSCCRRIIPPTTIIOONN
       _b_2_c is a tool for generating _C _s_o_u_r_c_e _c_h_u_n_k_s or  _C  _h_e_a_d_e_r  _f_i_l_e_s  from
       bbiinnaarriieess..   _b_2_c  automagically  generates complete _C _h_e_a_d_e_r files which
       can directly be included using the C pre-processors's  _#_i_n_c_l_u_d_e  direc-
       tive. (See the APPLICATION section below.)  By default _b_2_c encodes it's
       output into hexadecimal constants, which can be  changed  if  (See  the
       following OPTIONS section.)

OOPPTTIIOONNSS
       _b_2_c recognizes the following options:

       --CC     Use _d_e_c_i_m_a_l encoding of output constants.

       --HH     Use _h_e_x_a_d_e_c_i_m_a_l encoding of output constants.

       --OO     Use _o_c_t_a_l encoding of output constants.

       --cc _#_c_o_l_u_m_n_s
              The output routine's column counter (8 by default) is set to the
              number specified. Negative numbers are treated as No-Ops.

       --hh     Produce a valid C header file, ready for inclusion.   (See  also
              the -G option.)

       --ii _i_d_e_n_t_i_f_i_e_r
              Overwrite the output's routine default identifier ffoooo with _i_d_e_n_-
              _t_i_f_i_e_r_.  (Should be a valid C identifier.)

       --oo _f_i_l_e
              The output is redirected to _f_i_l_e, instead of the default _s_t_d_o_u_t_.

       --tt _t_y_p_e
              Overwrite the output's routine default type definition  uunnssiiggnneedd
              cchhaarr with _t_y_p_e_.  (Should be a valid C type.)

       --vv     Prints the version number and a copyright note on _s_t_d_e_r_r_.

       --DD _s_i_z_e_m_a_c_r_o
              Overwrite  the output's routine default `size' macro FFOOOOSSIIZZ with
              _s_i_z_e_m_a_c_r_o_.  (Should be a valid C pre-processor macro name.)

       --GG _g_u_a_r_d_m_a_c_r_o
              Overwrite the output's routine default `guardian' macro  __ffoooo__hh__
              with  _g_u_a_r_d_m_a_c_r_o_.   (Should  be  a  valid  C pre-processor macro
              name.)  Specifying `-G' implies option `-h'.

OOPPTTIIOONN SSUUMMMMAARRYY
       To give no option at all is the same as to give the options
              -H -c 8 -D FOOSIZ -i foo -t 'unsigned char'

EEXXAAMMPPLLEE
       Hence the following _b_i_n_a_r_y file `foobar' containing the 9 bytes: \001 -
       \011. Now type:

            b2c -h foobar

       which produces the following output:

            //** ffoooobbaarr **//
            ##iiffnnddeeff __ffoooo__hh__
            ##ddeeffiinnee __ffoooo__hh__

            uunnssiiggnneedd cchhaarr ffoooo [[]] == {{
                 00xx0011,, 00xx0022,, 00xx0033,, 00xx0044,, 00xx0055,, 00xx0066,, 00xx0077,, 00xx0088,,
                 00xx0099
            }};;

            ##ddeeffiinnee FFOOOOSSIIZZ ((((ssiizzeeooff((ffoooo))//ssiizzeeooff((uunnssiiggnneedd cchhaarr))))

            ##eennddiiff    //** __ffoooo__hh__ **//

       In more general terms:

            //** <<ffiilleennaammee>> **//
            ##iiffnnddeeff <<gguuaarrdd>>
            ##ddeeffiinnee <<gguuaarrdd>>

            <<ttyyppee>> <<iiddeennttiiffiieerr>> [[]] == {{
                 <<bbiinnaarryy ddaattaa>>
            }};;

            ##ddeeffiinnee <<mmaaccrroo>>     ((((ssiizzeeooff((<<iiddeennttiiffiieerr>>))//ssiizzeeooff((<<ttyyppee>>))))

            ##eennddiiff    //** <<gguuaarrdd>> **//

AAPPPPLLIICCAATTIIOONN
       Step  1. Convert one of your favourite _a_u_d_i_o files into a C definition,
       e.g.

            b2c -i laughter -D LAUGHSIZ -G _laugh_h_ -o laughter.h laughter.au

       Step 2. Write a simple application program like:

            ##iinncclluuddee <<ssttddiioo..hh>>
            ##iinncclluuddee ""llaauugghhtteerr..hh""

            FFIILLEE** aauuddiioo;;

            iiff ((((aauuddiioo == ffooppeenn ((""//ddeevv//aauuddiioo"",, ""ww"")))) !!== NNUULLLL)) {{
                 ffwwrriittee ((llaauugghhtteerr,, LLAAUUGGHHSSIIZZ,, 11,, aauuddiioo));;
                 ffcclloossee ((aauuddiioo));;
            }}

       Step 3. Enjoy!

       Step 4. Quick reality check from 2016: /dev/audio still exists,
              but it is no longer possible to  simply  sent  a  sunaudio  file
              using  cat  and  have  the  device  play it, unless you're under
              Solaris.

              So the two examples included are  only  here  for  archaelogical
              reasons.

SSEEEE AALLSSOO
       bbttooaa(1), aattoobb(1), mmttoooollss(1).

       The GNU rreeccooddee manual.

AAUUTTHHOORR
       Copyright (c) 1991-2016 Joerg Heitkoetter (joke). All rights reserved.
       Send bugs, comments, and all the fish to <joke@verizon.com>

CCRREEDDIITTSS
       Thanks    for    thoughtful    comments   from   David   W.   Sanderson
       (dws@ssec.wisc.edu), who made me believe that `-CDH options'  would  be
       nice.  And  Fran,cois Pinard (pinard@iro.umontreal.ca) for his comments
       on `spurious trailing blanks' in previous releases of _b_2_c_.  Look at his
       GNU rreeccooddee utility for more ideas on how to use _b_2_c_.

AAVVAAIILLAABBIILLIITTYY
       _b_2_c has been posted in 1997 to aalltt..ssoouurrcceess and should be available from
       your local aalltt..ssoouurrcceess news archive. It is  also  available  on  GitHub
       hhttttpp::////ggiitthhuubb..ccoomm//jjhheeiittkkooeetttteerr//bb22cc

       This  work is protected by the terms of the GNU General Public License.
       Please refer to the COPYING file accompanying the sources of this soft-
       ware package for a lengthy, boring but, absolute complete description.

FFIINNAALL NNOOTTEE
       The  author  used  _b_2_c (back in 1991) to convert disk boot sectors from
       diverse DOS versions to write formatter programs.  E.g. an  MSDOS  for-
       matter for an ATARI ST, that alloweed him to circumvent the _K_e_r_m_i_t-bot-
       tleneck, using mmttoooollss(1); which made  exchanging  data  between  theses
       systems  `a  doodle'.  (Yeah, this really used to be a problem in those
       days!)



Version 2.3                       March 2016                            B2C(1)
